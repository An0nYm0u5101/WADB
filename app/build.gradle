apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

def localFile = rootProject.file('local.properties')
def localProps = new Properties()
def dontRestartAdbd
if (localFile.canRead()) {
    localProps.load(localFile.newDataInputStream())
    dontRestartAdbd = localProps.get("debug.dontRestartAdbd", false)
}

android {
    compileSdkVersion target_sdk
    defaultConfig {
        applicationId "moe.haruue.wadb"
        minSdkVersion min_sdk
        targetSdkVersion target_sdk
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        resValue "string", "github_url", "https://github.com/RikkaApps/WADB"
        resValue "string", "copyright", "Copyright Â© Haruue Icymoon, PinkD, Rikka"
        resConfigs 'de', 'it', 'zh-rCN', 'zh-rHK', 'zh-rTW'

        buildConfigField "boolean", "DONOT_RESTART_ADBD", "${dontRestartAdbd}" // set it true to prevent restart adbd for DEBUG
    }
    signingConfigs {
        sign
    }
    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.sign
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.sign
        }
    }
    packagingOptions {
        exclude '/META-INF/*.version'
    }
}

android.applicationVariants.all { variant ->
    variant.outputs.all {
        outputFileName = "wadb-v${variant.versionName}.apk"

        if (variant.getBuildType().isMinifyEnabled()) {
            variant.assembleProvider.get().doLast {
                copy {
                    from variant.mappingFile
                    into "release"
                    rename { String fileName ->
                        "mapping-${variant.versionCode}.txt"
                    }
                }
                copy {
                    from outputFile
                    into "release"
                }
            }
        }
    }
}

repositories {
    jcenter()
    google()
    maven { url 'https://dl.bintray.com/haruue/maven/' }
    maven { url 'https://dl.bintray.com/rikkaw/Libraries' }
    maven { url 'https://dl.bintray.com/rikkaw/Shizuku' }
}

dependencies {
    def preferenceVersion = '4.1.0-alpha01'
    def libsuVersion = '2.5.0'

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    compileOnly project(':hidden')

    implementation "androidx.core:core:$androidx_core_version"
    implementation "androidx.fragment:fragment:$androidx_fragment_version"
    implementation "androidx.recyclerview:recyclerview:$androidx_recyclerview_version"
    implementation "androidx.browser:browser:$androidx_browser_version"

    implementation "rikka.core:core:$rikka_core_version"
    implementation "rikka.design:design:$rikka_design_version"

    implementation "moe.shizuku.preference:preference-android:$preferenceVersion"

    implementation "com.github.topjohnwu.libsu:core:${libsuVersion}"

    implementation 'moe.shizuku.privilege:api:3.1.0-alpha1'
}


def signFile = rootProject.file('signing.properties')
def signProps = new Properties()
if (signFile.canRead()) {
    signProps.load(new FileInputStream(signFile))
    if (signProps != null) {
        android.signingConfigs.sign.storeFile file(signProps['KEYSTORE_FILE'])
        android.signingConfigs.sign.storePassword signProps['KEYSTORE_PASSWORD']
        android.signingConfigs.sign.keyAlias signProps['KEYSTORE_ALIAS']
        android.signingConfigs.sign.keyPassword signProps['KEYSTORE_ALIAS_PASSWORD']
    } else {
        println 'some entries in \'signing.properties\' not found!'
    }
} else {
    println '\'signing.properties\' not found!'
}

